plugins {
	id 'java'
	id 'application'
}

repositories {
	jcenter()
}

configurations {
	externalTestRun
}

mainClassName = 'javalibexport.JavaLibExport'
version = '0.0.1'

dependencies {

	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'ch.qos.logback:logback-core:1.2.3'
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	implementation 'com.google.code.gson:gson:2.8.6'
	
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
	externalTestRun 'org.junit.platform:junit-platform-console-standalone:1.6.2'

}

test {
	useJUnitPlatform()
}

task prepareExternalTest(type: Copy, group: 'verification', description: 'Copys the offline JUnit runner to directory with compiled classes.') {
	into "${buildDir}/classes/java"
	from configurations.externalTestRun
}

task exportDependencies(type: Copy, group: 'distribution', description: 'Exports the application dependencies into a export folder.') {
	into "${buildDir}/setup/lib"
	from configurations.runtimeClasspath
}

task exportLogbackConfigInfo(type: Copy, group: 'distribution', description: 'Exports the configuration file for logback with level "INFO".'){
	dependsOn exportDependencies
	from (sourceSets.main.output) {
        include "/logback.xml"
        filter{ it.replaceAll('logs/application.log', '../logs/application.log')}
    }
	into "${buildDir}/setup/config"
	rename { filename ->
        filename.replace 'xml', 'info.xml'
    }
}

task exportLogbackConfigDebug(type: Copy, group: 'distribution', description: 'Exports the configuration file for logback with level "DEBUG".'){
	dependsOn exportDependencies
	from (sourceSets.main.output) {
        include "/logback.xml"
        filter{ it.replaceAll('logs/application.log', '../logs/application.log')}
        filter{ it.replaceAll('level="INFO"', 'level="DEBUG"')}
    }
	into "${buildDir}/setup/config"
	rename { filename ->
        filename.replace 'xml', 'debug.xml'
    }
}

tasks.withType(Jar) {
	destinationDirectory = file("${buildDir}/setup/lib")
}

jar {
	dependsOn exportLogbackConfigInfo
	dependsOn exportLogbackConfigDebug
	manifest {
		attributes 'Main-Class': 'javalibexport.JavaLibExport'
	}
}

task exportInfoBat(type: Copy, group: 'distribution', description: 'Exports the Windows batch file. Logging level "INFO".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.bat"
        filter{ it.replaceAll('logback.xml', 'logback.info.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'bat', 'info.bat'
    }
}

task exportInfoPs1(type: Copy, group: 'distribution', description: 'Exports the Windows PowerShell file. Logging level "INFO".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.ps1"
        filter{ it.replaceAll('logback.xml', 'logback.info.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'ps1', 'info.ps1'
    }
}

task exportInfoSh(type: Copy, group: 'distribution', description: 'Exports the Bash launcher file. Logging level "INFO".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.sh"
        filter{ it.replaceAll('logback.xml', 'logback.info.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'sh', 'info.sh'
    }
}

task exportDebugBat(type: Copy, group: 'distribution', description: 'Exports the Windows batch file. Logging level "DEBUG".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.bat"
        filter{ it.replaceAll('logback.xml', 'logback.debug.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'bat', 'debug.bat'
    }
}

task exportDebugPs1(type: Copy, group: 'distribution', description: 'Exports the Windows PowerShell file. Logging level "DEBUG".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.ps1"
        filter{ it.replaceAll('logback.xml', 'logback.debug.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'ps1', 'debug.ps1'
    }
}

task exportDebugSh(type: Copy, group: 'distribution', description: 'Exports the Bash launcher file. Logging level "DEBUG".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.sh"
        filter{ it.replaceAll('logback.xml', 'logback.debug.xml')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'sh', 'debug.sh'
    }
}

task writeExecScripts(group: 'build', description: 'Writes the execute scripts to the output directory.'){
	
	dependsOn exportInfoBat
	dependsOn exportInfoPs1
	dependsOn exportInfoSh
	
	dependsOn exportDebugBat
	dependsOn exportDebugPs1
	dependsOn exportDebugSh
}

task createSetup(type: Exec, group: "build setup", description: "Builds basic installer.") {
    dependsOn writeExecScripts
    mustRunAfter writeExecScripts
	workingDir 'setup'
	commandLine 'makensis.exe','/DVERSION='+version,'setup.nsi'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
}

compileJava.dependsOn clean
plugins {
	id 'java'
	id 'application'
}

repositories {
	jcenter()
}

configurations {
	externalTestRun
}

mainClassName = 'javalibexport.JavaLibExport'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'ch.qos.logback:logback-core:1.2.3'
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	implementation 'com.google.code.gson:gson:2.8.6'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
	externalTestRun 'org.junit.platform:junit-platform-console-standalone:1.7.0'
}

test {
	useJUnitPlatform()
}

task prepareExternalTest(type: Copy, group: 'verification', description: 'Copys the offline JUnit runner to directory with compiled classes.') {
	into "${buildDir}/classes/java"
	from configurations.externalTestRun
}

task exportDependencies(type: Copy, group: 'distribution', description: 'Exports the application dependencies into a export folder.') {
	into "${buildDir}/setup/lib"
	from configurations.runtimeClasspath
}

task exportLogbackConfig(type: Copy, group: 'distribution', description: 'Exports the configuration file.'){
	dependsOn exportDependencies
	from (sourceSets.main.output) {
        include "/logback.xml"
        /*
          Reconfigure the output path. In the development environment the execution directory is the project directory.
          In the installed environment the execution directory is in the folder "bin". Therefor the output path starts
          with ".." to change to the program directory.
        */
        filter{ it.replaceAll('logs/application.log', '../logs/application.log')}
        filter{ it.replaceAll('	<root level="(.*)">', '	<!-- The variable "logback.level" is specified with the "-D" parameter when executing the application.\r\n	     Take a look at the executables in the folder "bin". -->\r\n	<root level="\\${logback.level}">')}
    }
	into "${buildDir}/setup/config"
}

tasks.withType(Jar) {
	destinationDirectory = file("${buildDir}/setup/lib")
}

jar {
	dependsOn exportLogbackConfig
	manifest {
		attributes 'Main-Class': 'javalibexport.JavaLibExport'
	}
}

/* Creates executable scripts that produce default logging output by setting the logging level to "INFO". */
task exportInfoExecs(type: Copy, group: 'distribution', description: 'Exports the executables. Logging level "INFO".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.bat"
        include "/javalibexport.ps1"
        include "/javalibexport.sh"
        filter{ it.replaceAll('logback.xml', 'logback.xml -Dlogback.level=INFO')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'javalibexport', 'javalibexport.info'
    }
}

/* Creates executable scripts that produce more logging output by setting the logging level to "DEBUG". */
task exportDebugExecs(type: Copy, group: 'distribution', description: 'Exports the executables. Logging level "DEBUG".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.bat"
        include "/javalibexport.ps1"
        include "/javalibexport.sh"
        filter{ it.replaceAll('logback.xml', 'logback.xml -Dlogback.level=DEBUG')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'javalibexport', 'javalibexport.debug'
    }
}

/* Creates executable scripts that produce no logging output by setting the logging level to "OFF". */
task exportNologExecs(type: Copy, group: 'distribution', description: 'Exports the executables. Logging level "OFF".'){
	dependsOn jar
	from (sourceSets.main.output) {
        include "/javalibexport.bat"
        include "/javalibexport.ps1"
        include "/javalibexport.sh"
        filter{ it.replaceAll('logback.xml', 'logback.xml -Dlogback.level=OFF')}
    }
    into "${buildDir}/setup/bin"
    rename { filename ->
        filename.replace 'javalibexport', 'javalibexport.nolog'
    }
}

/* Collection task to execute all executable producing tasks. */
task writeExecScripts(group: 'build', description: 'Writes the execute scripts to the output directory.'){
	dependsOn exportInfoExecs
	dependsOn exportDebugExecs
	dependsOn exportNologExecs
}

task createSubSetup(type: Exec, group: "build setup", description: "Builds subsetup installer.") {
    dependsOn writeExecScripts
    mustRunAfter writeExecScripts
	workingDir 'setup'
	commandLine 'makensis.exe','/DVERSION='+version,'subsetup.nsi'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
}

task createSetup(type: Exec, group: "build setup", description: "Builds basic installer.") {
    dependsOn createSubSetup
    mustRunAfter createSubSetup
	workingDir 'setup'
	commandLine 'makensis.exe','/DVERSION='+version,'setup.nsi'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
}

/* Always clean the output directory. */
compileJava.dependsOn clean